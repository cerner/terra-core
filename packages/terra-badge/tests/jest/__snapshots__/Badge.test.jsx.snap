// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Badge with additional props correctly applies the theme context className 1`] = `
<InjectIntl(Badge)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  text="Test value"
>
  <Badge
    icon={null}
    intent="default"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isReversed={false}
    size="small"
    text="Test value"
  >
    <span
      className="badge small default orion-fusion-theme"
    >
      <span
        className="text"
      >
        Test value
      </span>
    </span>
  </Badge>
</InjectIntl(Badge)>
`;

exports[`should render a badge component in the order, icon and text with medium size 1`] = `
<span
  className="badge has-icon medium default"
>
  <img
    alt="Test icon"
  />
  <span
    className="text"
  >
    Test value
  </span>
</span>
`;

exports[`should render a badge component in the order, text and icon with info intent 1`] = `
<span
  className="badge has-icon is-reversed small info"
>
  <VisuallyHiddenText
    text="Terra.badge.intent.info"
  />
  <span
    className="text"
  >
    Test value
  </span>
  <img
    alt="Test icon"
  />
</span>
`;

exports[`should render a badge component with icon and medium size 1`] = `
<span
  className="badge has-icon medium default"
>
  <img
    alt="Test icon"
  />
</span>
`;

exports[`should render a badge component with icon and warning intent 1`] = `
<span
  className="badge has-icon small warning"
>
  <img
    alt="Test icon"
  />
  <VisuallyHiddenText
    text="Terra.badge.intent.warning"
  />
</span>
`;

exports[`should render a badge component with text and large size 1`] = `
<span
  className="badge large default"
>
  <span
    className="text"
  >
    Large
  </span>
</span>
`;

exports[`should render a badge component with text and secondary intent 1`] = `
<span
  className="badge small secondary"
>
  <VisuallyHiddenText
    text="Terra.badge.intent.secondary"
  />
  <span
    className="text"
  >
    Secondary
  </span>
</span>
`;

exports[`should render a badge component with visually hidden text 1`] = `
<span
  className="badge small default"
>
  <span
    className="text"
  >
    3
  </span>
  <VisuallyHiddenText
    text="Risk Score 3"
  />
</span>
`;

exports[`should render a default component with nothing 1`] = `
<span
  className="badge small default"
/>
`;
