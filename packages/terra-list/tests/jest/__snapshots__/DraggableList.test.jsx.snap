// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render List with items 1`] = `
<InjectIntl(List)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isDraggable={true}
>
  <List
    ariaSelectionStyle="none"
    dividerStyle="none"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isDraggable={true}
    isTabFocusDisabled={false}
    paddingStyle="none"
    role="none"
    zIndex={6001}
  >
    <DragDropContext
      onDragEnd={[Function]}
      onDragStart={[Function]}
      onDragUpdate={[Function]}
    >
      <ErrorBoundary>
        <App
          contextId="0"
          dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
          onDragEnd={[Function]}
          onDragStart={[Function]}
          onDragUpdate={[Function]}
          setCallbacks={[Function]}
        >
          <Provider
            context={
              Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              }
            }
            store={
              Object {
                "@@observable": [Function],
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          >
            <Connect(Droppable)
              direction="vertical"
              droppableId="ListItem"
              getContainerForClone={[Function]}
              ignoreContainerClipping={false}
              isCombineEnabled={false}
              isDropDisabled={false}
              mode="standard"
              renderClone={[Function]}
              type="DEFAULT"
            >
              <Droppable
                direction="vertical"
                droppableId="ListItem"
                getContainerForClone={[Function]}
                ignoreContainerClipping={false}
                isCombineEnabled={false}
                isDropDisabled={false}
                mode="standard"
                placeholder={null}
                renderClone={[Function]}
                shouldAnimatePlaceholder={false}
                snapshot={
                  Object {
                    "draggingFromThisWith": null,
                    "draggingOverWith": null,
                    "isDraggingOver": false,
                    "isUsingPlaceholder": false,
                  }
                }
                type="DEFAULT"
                updateViewportMaxScroll={[Function]}
                useClone={null}
              >
                <ul
                  className="list"
                  data-rbd-droppable-context-id="0"
                  data-rbd-droppable-id="ListItem"
                  onKeyDown={[Function]}
                  role="list"
                >
                  <PublicDraggable
                    draggableId="1"
                    index={0}
                    isDragDisabled={false}
                    key="1"
                  >
                    <PrivateDraggable
                      canDragInteractiveElements={false}
                      draggableId="1"
                      index={0}
                      isClone={false}
                      isDragDisabled={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Connect(Draggable)
                        canDragInteractiveElements={false}
                        draggableId="1"
                        index={0}
                        isClone={false}
                        isDragDisabled={false}
                        isEnabled={true}
                        shouldRespectForcePress={false}
                      >
                        <Draggable
                          canDragInteractiveElements={false}
                          draggableId="1"
                          dropAnimationFinished={[Function]}
                          index={0}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          mapped={
                            Object {
                              "combineTargetFor": null,
                              "offset": Object {
                                "x": 0,
                                "y": 0,
                              },
                              "shouldAnimateDisplacement": true,
                              "snapshot": Object {
                                "combineTargetFor": null,
                                "combineWith": null,
                                "draggingOver": null,
                                "dropAnimation": null,
                                "isClone": false,
                                "isDragging": false,
                                "isDropAnimating": false,
                                "mode": null,
                              },
                              "type": "SECONDARY",
                            }
                          }
                          shouldRespectForcePress={false}
                        >
                          <InjectIntl(ListItem)
                            aria-describedby="rbd-hidden-text-0-hidden-text-0"
                            data-rbd-drag-handle-context-id="0"
                            data-rbd-drag-handle-draggable-id="1"
                            data-rbd-draggable-context-id="0"
                            data-rbd-draggable-id="1"
                            draggable={false}
                            isDraggable={true}
                            isSelectable={true}
                            isTabFocusDisabled={false}
                            key="1"
                            onDragStart={[Function]}
                            onTransitionEnd={null}
                            refCallback={[Function]}
                            role="button"
                            style={
                              Object {
                                "transform": null,
                                "transition": null,
                              }
                            }
                            tabIndex={0}
                          >
                            <ListItem
                              aria-describedby="rbd-hidden-text-0-hidden-text-0"
                              data-rbd-drag-handle-context-id="0"
                              data-rbd-drag-handle-draggable-id="1"
                              data-rbd-draggable-context-id="0"
                              data-rbd-draggable-id="1"
                              draggable={false}
                              hasChevron={false}
                              intl={
                                Object {
                                  "defaultFormats": Object {},
                                  "defaultLocale": "en",
                                  "formatDate": [Function],
                                  "formatHTMLMessage": [Function],
                                  "formatMessage": [Function],
                                  "formatNumber": [Function],
                                  "formatPlural": [Function],
                                  "formatRelative": [Function],
                                  "formatTime": [Function],
                                  "formats": Object {},
                                  "formatters": Object {
                                    "getDateTimeFormat": [Function],
                                    "getMessageFormat": [Function],
                                    "getNumberFormat": [Function],
                                    "getPluralFormat": [Function],
                                    "getRelativeFormat": [Function],
                                  },
                                  "locale": "en",
                                  "messages": null,
                                  "now": [Function],
                                  "onError": [Function],
                                  "textComponent": "span",
                                  "timeZone": null,
                                }
                              }
                              isDraggable={true}
                              isSelectable={true}
                              isSelected={false}
                              isTabFocusDisabled={false}
                              onDragStart={[Function]}
                              onTransitionEnd={null}
                              refCallback={[Function]}
                              role="button"
                              style={
                                Object {
                                  "transform": null,
                                  "transition": null,
                                }
                              }
                              tabIndex={0}
                            >
                              <li
                                aria-describedby="terra-hidden-tab-pane-response=0.5"
                                aria-selected={false}
                                className="list-item is-selectable"
                                data-item-show-focus="true"
                                data-rbd-drag-handle-context-id="0"
                                data-rbd-drag-handle-draggable-id="1"
                                data-rbd-draggable-context-id="0"
                                data-rbd-draggable-id="1"
                                draggable={false}
                                onBlur={[Function]}
                                onDragStart={[Function]}
                                onMouseDown={[Function]}
                                onTransitionEnd={null}
                                role="option"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex="0"
                              >
                                <div
                                  key="knurling-icon"
                                >
                                  <IconKnurling
                                    viewBox="0 0 48 48"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <IconBase
                                      focusable="false"
                                      height="1em"
                                      isBidi={false}
                                      isSpin={false}
                                      viewBox="0 0 48 48"
                                      width="1em"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <svg
                                        className="tui-Icon icon"
                                        focusable="false"
                                        height="1em"
                                        role="presentation"
                                        viewBox="0 0 48 48"
                                        width="1em"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <g
                                          data-name="48"
                                        >
                                          <circle
                                            cx="15"
                                            cy="4.632"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="15"
                                            cy="17.443"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="15"
                                            cy="30.254"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="15"
                                            cy="43.066"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="4.632"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="17.544"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="30.456"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="43.368"
                                            r="3.5"
                                          />
                                        </g>
                                      </svg>
                                    </IconBase>
                                  </IconKnurling>
                                  <VisuallyHiddenText
                                    aria-hidden={true}
                                    id="terra-hidden-tab-pane-response=0.5"
                                    text="Terra.list.focus"
                                  >
                                    <span
                                      aria-hidden={true}
                                      className="visually-hidden-text"
                                      id="terra-hidden-tab-pane-response=0.5"
                                    >
                                      Terra.list.focus
                                    </span>
                                  </VisuallyHiddenText>
                                </div>
                                <div
                                  className="item-fill"
                                  key="item-fill"
                                />
                              </li>
                            </ListItem>
                          </InjectIntl(ListItem)>
                        </Draggable>
                      </Connect(Draggable)>
                    </PrivateDraggable>
                  </PublicDraggable>
                  <PublicDraggable
                    draggableId="2"
                    index={1}
                    isDragDisabled={false}
                    key="2"
                  >
                    <PrivateDraggable
                      canDragInteractiveElements={false}
                      draggableId="2"
                      index={1}
                      isClone={false}
                      isDragDisabled={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Connect(Draggable)
                        canDragInteractiveElements={false}
                        draggableId="2"
                        index={1}
                        isClone={false}
                        isDragDisabled={false}
                        isEnabled={true}
                        shouldRespectForcePress={false}
                      >
                        <Draggable
                          canDragInteractiveElements={false}
                          draggableId="2"
                          dropAnimationFinished={[Function]}
                          index={1}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          mapped={
                            Object {
                              "combineTargetFor": null,
                              "offset": Object {
                                "x": 0,
                                "y": 0,
                              },
                              "shouldAnimateDisplacement": true,
                              "snapshot": Object {
                                "combineTargetFor": null,
                                "combineWith": null,
                                "draggingOver": null,
                                "dropAnimation": null,
                                "isClone": false,
                                "isDragging": false,
                                "isDropAnimating": false,
                                "mode": null,
                              },
                              "type": "SECONDARY",
                            }
                          }
                          shouldRespectForcePress={false}
                        >
                          <InjectIntl(ListItem)
                            aria-describedby="rbd-hidden-text-0-hidden-text-0"
                            data-rbd-drag-handle-context-id="0"
                            data-rbd-drag-handle-draggable-id="2"
                            data-rbd-draggable-context-id="0"
                            data-rbd-draggable-id="2"
                            draggable={false}
                            isDraggable={true}
                            isSelectable={true}
                            isTabFocusDisabled={false}
                            key="2"
                            onDragStart={[Function]}
                            onTransitionEnd={null}
                            refCallback={[Function]}
                            role="button"
                            style={
                              Object {
                                "transform": null,
                                "transition": null,
                              }
                            }
                            tabIndex={0}
                          >
                            <ListItem
                              aria-describedby="rbd-hidden-text-0-hidden-text-0"
                              data-rbd-drag-handle-context-id="0"
                              data-rbd-drag-handle-draggable-id="2"
                              data-rbd-draggable-context-id="0"
                              data-rbd-draggable-id="2"
                              draggable={false}
                              hasChevron={false}
                              intl={
                                Object {
                                  "defaultFormats": Object {},
                                  "defaultLocale": "en",
                                  "formatDate": [Function],
                                  "formatHTMLMessage": [Function],
                                  "formatMessage": [Function],
                                  "formatNumber": [Function],
                                  "formatPlural": [Function],
                                  "formatRelative": [Function],
                                  "formatTime": [Function],
                                  "formats": Object {},
                                  "formatters": Object {
                                    "getDateTimeFormat": [Function],
                                    "getMessageFormat": [Function],
                                    "getNumberFormat": [Function],
                                    "getPluralFormat": [Function],
                                    "getRelativeFormat": [Function],
                                  },
                                  "locale": "en",
                                  "messages": null,
                                  "now": [Function],
                                  "onError": [Function],
                                  "textComponent": "span",
                                  "timeZone": null,
                                }
                              }
                              isDraggable={true}
                              isSelectable={true}
                              isSelected={false}
                              isTabFocusDisabled={false}
                              onDragStart={[Function]}
                              onTransitionEnd={null}
                              refCallback={[Function]}
                              role="button"
                              style={
                                Object {
                                  "transform": null,
                                  "transition": null,
                                }
                              }
                              tabIndex={0}
                            >
                              <li
                                aria-describedby="terra-hidden-tab-pane-response=0.5"
                                aria-selected={false}
                                className="list-item is-selectable"
                                data-item-show-focus="true"
                                data-rbd-drag-handle-context-id="0"
                                data-rbd-drag-handle-draggable-id="2"
                                data-rbd-draggable-context-id="0"
                                data-rbd-draggable-id="2"
                                draggable={false}
                                onBlur={[Function]}
                                onDragStart={[Function]}
                                onMouseDown={[Function]}
                                onTransitionEnd={null}
                                role="option"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex="0"
                              >
                                <div
                                  key="knurling-icon"
                                >
                                  <IconKnurling
                                    viewBox="0 0 48 48"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <IconBase
                                      focusable="false"
                                      height="1em"
                                      isBidi={false}
                                      isSpin={false}
                                      viewBox="0 0 48 48"
                                      width="1em"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <svg
                                        className="tui-Icon icon"
                                        focusable="false"
                                        height="1em"
                                        role="presentation"
                                        viewBox="0 0 48 48"
                                        width="1em"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <g
                                          data-name="48"
                                        >
                                          <circle
                                            cx="15"
                                            cy="4.632"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="15"
                                            cy="17.443"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="15"
                                            cy="30.254"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="15"
                                            cy="43.066"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="4.632"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="17.544"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="30.456"
                                            r="3.5"
                                          />
                                          <circle
                                            cx="33"
                                            cy="43.368"
                                            r="3.5"
                                          />
                                        </g>
                                      </svg>
                                    </IconBase>
                                  </IconKnurling>
                                  <VisuallyHiddenText
                                    aria-hidden={true}
                                    id="terra-hidden-tab-pane-response=0.5"
                                    text="Terra.list.focus"
                                  >
                                    <span
                                      aria-hidden={true}
                                      className="visually-hidden-text"
                                      id="terra-hidden-tab-pane-response=0.5"
                                    >
                                      Terra.list.focus
                                    </span>
                                  </VisuallyHiddenText>
                                </div>
                                <div
                                  className="item-fill"
                                  key="item-fill"
                                />
                              </li>
                            </ListItem>
                          </InjectIntl(ListItem)>
                        </Draggable>
                      </Connect(Draggable)>
                    </PrivateDraggable>
                  </PublicDraggable>
                  <AnimateInOut
                    on={null}
                    shouldAnimate={false}
                  />
                </ul>
              </Droppable>
            </Connect(Droppable)>
          </Provider>
        </App>
      </ErrorBoundary>
    </DragDropContext>
  </List>
</InjectIntl(List)>
`;

exports[`should render List without Draggable items 1`] = `
<ul
  className="list"
  onKeyDown={[Function]}
  role="list"
>
  <InjectIntl(ListItem)
    isSelectable={true}
    isTabFocusDisabled={false}
    key=".$123"
  />
  <InjectIntl(ListItem)
    isSelectable={true}
    isTabFocusDisabled={false}
    key=".$124"
  />
  <InjectIntl(ListItem)
    isSelectable={true}
    isTabFocusDisabled={false}
    key=".$125"
  />
</ul>
`;

exports[`should render Section with items 1`] = `
<InjectIntl(ListSection)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isDraggable={true}
  title="test"
>
  <ListSection
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isCollapsed={false}
    isCollapsible={false}
    isDraggable={true}
    level={2}
    title="test"
    zIndex={6001}
  >
    <DragDropContext
      onDragEnd={[Function]}
      onDragStart={[Function]}
      onDragUpdate={[Function]}
    >
      <ErrorBoundary>
        <App
          contextId="1"
          dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
          onDragEnd={[Function]}
          onDragStart={[Function]}
          onDragUpdate={[Function]}
          setCallbacks={[Function]}
        >
          <Provider
            context={
              Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              }
            }
            store={
              Object {
                "@@observable": [Function],
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          >
            <Connect(Droppable)
              direction="vertical"
              droppableId="listSection"
              getContainerForClone={[Function]}
              ignoreContainerClipping={false}
              isCombineEnabled={false}
              isDropDisabled={false}
              mode="standard"
              renderClone={[Function]}
              type="DEFAULT"
            >
              <Droppable
                direction="vertical"
                droppableId="listSection"
                getContainerForClone={[Function]}
                ignoreContainerClipping={false}
                isCombineEnabled={false}
                isDropDisabled={false}
                mode="standard"
                placeholder={null}
                renderClone={[Function]}
                shouldAnimatePlaceholder={false}
                snapshot={
                  Object {
                    "draggingFromThisWith": null,
                    "draggingOverWith": null,
                    "isDraggingOver": false,
                    "isUsingPlaceholder": false,
                  }
                }
                type="DEFAULT"
                updateViewportMaxScroll={[Function]}
                useClone={null}
              >
                <div>
                  <ListSectionHeader
                    isCollapsed={false}
                    isCollapsible={false}
                    level={2}
                    title="test"
                  >
                    <li
                      className="list-item"
                    >
                      <h2
                        className="title"
                      >
                        <div
                          className="section-header"
                        >
                          <div
                            className="fill"
                          >
                            test
                          </div>
                        </div>
                      </h2>
                    </li>
                  </ListSectionHeader>
                  <li
                    className="list-item"
                  >
                    <ul
                      className="list list-fill"
                      onKeyDown={[Function]}
                    >
                      <PublicDraggable
                        draggableId="123"
                        index={0}
                        isDragDisabled={false}
                        key="123"
                      >
                        <PrivateDraggable
                          canDragInteractiveElements={false}
                          draggableId="123"
                          index={0}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          shouldRespectForcePress={false}
                        >
                          <Connect(Draggable)
                            canDragInteractiveElements={false}
                            draggableId="123"
                            index={0}
                            isClone={false}
                            isDragDisabled={false}
                            isEnabled={true}
                            shouldRespectForcePress={false}
                          >
                            <Draggable
                              canDragInteractiveElements={false}
                              draggableId="123"
                              dropAnimationFinished={[Function]}
                              index={0}
                              isClone={false}
                              isDragDisabled={false}
                              isEnabled={true}
                              mapped={
                                Object {
                                  "combineTargetFor": null,
                                  "offset": Object {
                                    "x": 0,
                                    "y": 0,
                                  },
                                  "shouldAnimateDisplacement": true,
                                  "snapshot": Object {
                                    "combineTargetFor": null,
                                    "combineWith": null,
                                    "draggingOver": null,
                                    "dropAnimation": null,
                                    "isClone": false,
                                    "isDragging": false,
                                    "isDropAnimating": false,
                                    "mode": null,
                                  },
                                  "type": "SECONDARY",
                                }
                              }
                              shouldRespectForcePress={false}
                            >
                              <InjectIntl(ListItem)
                                aria-describedby="rbd-hidden-text-1-hidden-text-4"
                                data-rbd-drag-handle-context-id="1"
                                data-rbd-drag-handle-draggable-id="123"
                                data-rbd-draggable-context-id="1"
                                data-rbd-draggable-id="123"
                                draggable={false}
                                isDraggable={true}
                                isSelectable={true}
                                key="123"
                                onDragStart={[Function]}
                                onTransitionEnd={null}
                                refCallback={[Function]}
                                role="button"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex={0}
                              >
                                <ListItem
                                  aria-describedby="rbd-hidden-text-1-hidden-text-4"
                                  data-rbd-drag-handle-context-id="1"
                                  data-rbd-drag-handle-draggable-id="123"
                                  data-rbd-draggable-context-id="1"
                                  data-rbd-draggable-id="123"
                                  draggable={false}
                                  hasChevron={false}
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {},
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": null,
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": "span",
                                      "timeZone": null,
                                    }
                                  }
                                  isDraggable={true}
                                  isSelectable={true}
                                  isSelected={false}
                                  onDragStart={[Function]}
                                  onTransitionEnd={null}
                                  refCallback={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "transform": null,
                                      "transition": null,
                                    }
                                  }
                                  tabIndex={0}
                                >
                                  <li
                                    aria-describedby="terra-hidden-tab-pane-response=0.5"
                                    aria-selected={false}
                                    className="list-item is-selectable"
                                    data-item-show-focus="true"
                                    data-rbd-drag-handle-context-id="1"
                                    data-rbd-drag-handle-draggable-id="123"
                                    data-rbd-draggable-context-id="1"
                                    data-rbd-draggable-id="123"
                                    draggable={false}
                                    onBlur={[Function]}
                                    onDragStart={[Function]}
                                    onMouseDown={[Function]}
                                    onTransitionEnd={null}
                                    role="option"
                                    style={
                                      Object {
                                        "transform": null,
                                        "transition": null,
                                      }
                                    }
                                    tabIndex="0"
                                  >
                                    <div
                                      key="knurling-icon"
                                    >
                                      <IconKnurling
                                        viewBox="0 0 48 48"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <IconBase
                                          focusable="false"
                                          height="1em"
                                          isBidi={false}
                                          isSpin={false}
                                          viewBox="0 0 48 48"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <svg
                                            className="tui-Icon icon"
                                            focusable="false"
                                            height="1em"
                                            role="presentation"
                                            viewBox="0 0 48 48"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              data-name="48"
                                            >
                                              <circle
                                                cx="15"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="17.443"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="30.254"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="43.066"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="17.544"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="30.456"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="43.368"
                                                r="3.5"
                                              />
                                            </g>
                                          </svg>
                                        </IconBase>
                                      </IconKnurling>
                                      <VisuallyHiddenText
                                        aria-hidden={true}
                                        id="terra-hidden-tab-pane-response=0.5"
                                        text="Terra.list.focus"
                                      >
                                        <span
                                          aria-hidden={true}
                                          className="visually-hidden-text"
                                          id="terra-hidden-tab-pane-response=0.5"
                                        >
                                          Terra.list.focus
                                        </span>
                                      </VisuallyHiddenText>
                                    </div>
                                    <div
                                      className="item-fill"
                                      key="item-fill"
                                    />
                                  </li>
                                </ListItem>
                              </InjectIntl(ListItem)>
                            </Draggable>
                          </Connect(Draggable)>
                        </PrivateDraggable>
                      </PublicDraggable>
                      <PublicDraggable
                        draggableId="124"
                        index={1}
                        isDragDisabled={false}
                        key="124"
                      >
                        <PrivateDraggable
                          canDragInteractiveElements={false}
                          draggableId="124"
                          index={1}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          shouldRespectForcePress={false}
                        >
                          <Connect(Draggable)
                            canDragInteractiveElements={false}
                            draggableId="124"
                            index={1}
                            isClone={false}
                            isDragDisabled={false}
                            isEnabled={true}
                            shouldRespectForcePress={false}
                          >
                            <Draggable
                              canDragInteractiveElements={false}
                              draggableId="124"
                              dropAnimationFinished={[Function]}
                              index={1}
                              isClone={false}
                              isDragDisabled={false}
                              isEnabled={true}
                              mapped={
                                Object {
                                  "combineTargetFor": null,
                                  "offset": Object {
                                    "x": 0,
                                    "y": 0,
                                  },
                                  "shouldAnimateDisplacement": true,
                                  "snapshot": Object {
                                    "combineTargetFor": null,
                                    "combineWith": null,
                                    "draggingOver": null,
                                    "dropAnimation": null,
                                    "isClone": false,
                                    "isDragging": false,
                                    "isDropAnimating": false,
                                    "mode": null,
                                  },
                                  "type": "SECONDARY",
                                }
                              }
                              shouldRespectForcePress={false}
                            >
                              <InjectIntl(ListItem)
                                aria-describedby="rbd-hidden-text-1-hidden-text-4"
                                data-rbd-drag-handle-context-id="1"
                                data-rbd-drag-handle-draggable-id="124"
                                data-rbd-draggable-context-id="1"
                                data-rbd-draggable-id="124"
                                draggable={false}
                                isDraggable={true}
                                isSelectable={true}
                                key="124"
                                onDragStart={[Function]}
                                onTransitionEnd={null}
                                refCallback={[Function]}
                                role="button"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex={0}
                              >
                                <ListItem
                                  aria-describedby="rbd-hidden-text-1-hidden-text-4"
                                  data-rbd-drag-handle-context-id="1"
                                  data-rbd-drag-handle-draggable-id="124"
                                  data-rbd-draggable-context-id="1"
                                  data-rbd-draggable-id="124"
                                  draggable={false}
                                  hasChevron={false}
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {},
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": null,
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": "span",
                                      "timeZone": null,
                                    }
                                  }
                                  isDraggable={true}
                                  isSelectable={true}
                                  isSelected={false}
                                  onDragStart={[Function]}
                                  onTransitionEnd={null}
                                  refCallback={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "transform": null,
                                      "transition": null,
                                    }
                                  }
                                  tabIndex={0}
                                >
                                  <li
                                    aria-describedby="terra-hidden-tab-pane-response=0.5"
                                    aria-selected={false}
                                    className="list-item is-selectable"
                                    data-item-show-focus="true"
                                    data-rbd-drag-handle-context-id="1"
                                    data-rbd-drag-handle-draggable-id="124"
                                    data-rbd-draggable-context-id="1"
                                    data-rbd-draggable-id="124"
                                    draggable={false}
                                    onBlur={[Function]}
                                    onDragStart={[Function]}
                                    onMouseDown={[Function]}
                                    onTransitionEnd={null}
                                    role="option"
                                    style={
                                      Object {
                                        "transform": null,
                                        "transition": null,
                                      }
                                    }
                                    tabIndex="0"
                                  >
                                    <div
                                      key="knurling-icon"
                                    >
                                      <IconKnurling
                                        viewBox="0 0 48 48"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <IconBase
                                          focusable="false"
                                          height="1em"
                                          isBidi={false}
                                          isSpin={false}
                                          viewBox="0 0 48 48"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <svg
                                            className="tui-Icon icon"
                                            focusable="false"
                                            height="1em"
                                            role="presentation"
                                            viewBox="0 0 48 48"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              data-name="48"
                                            >
                                              <circle
                                                cx="15"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="17.443"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="30.254"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="43.066"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="17.544"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="30.456"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="43.368"
                                                r="3.5"
                                              />
                                            </g>
                                          </svg>
                                        </IconBase>
                                      </IconKnurling>
                                      <VisuallyHiddenText
                                        aria-hidden={true}
                                        id="terra-hidden-tab-pane-response=0.5"
                                        text="Terra.list.focus"
                                      >
                                        <span
                                          aria-hidden={true}
                                          className="visually-hidden-text"
                                          id="terra-hidden-tab-pane-response=0.5"
                                        >
                                          Terra.list.focus
                                        </span>
                                      </VisuallyHiddenText>
                                    </div>
                                    <div
                                      className="item-fill"
                                      key="item-fill"
                                    />
                                  </li>
                                </ListItem>
                              </InjectIntl(ListItem)>
                            </Draggable>
                          </Connect(Draggable)>
                        </PrivateDraggable>
                      </PublicDraggable>
                    </ul>
                  </li>
                  <AnimateInOut
                    on={null}
                    shouldAnimate={false}
                  />
                </div>
              </Droppable>
            </Connect(Droppable)>
          </Provider>
        </App>
      </ErrorBoundary>
    </DragDropContext>
  </ListSection>
</InjectIntl(ListSection)>
`;

exports[`should render subsection with items 1`] = `
<InjectIntl(ListSubsection)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isDraggable={true}
  title="subsection"
>
  <ListSubsection
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    isCollapsed={false}
    isCollapsible={false}
    isDraggable={true}
    level={2}
    title="subsection"
    zIndex={6001}
  >
    <DragDropContext
      onDragEnd={[Function]}
      onDragStart={[Function]}
      onDragUpdate={[Function]}
    >
      <ErrorBoundary>
        <App
          contextId="2"
          dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
          onDragEnd={[Function]}
          onDragStart={[Function]}
          onDragUpdate={[Function]}
          setCallbacks={[Function]}
        >
          <Provider
            context={
              Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              }
            }
            store={
              Object {
                "@@observable": [Function],
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
          >
            <Connect(Droppable)
              direction="vertical"
              droppableId="listSubSection"
              getContainerForClone={[Function]}
              ignoreContainerClipping={false}
              isCombineEnabled={false}
              isDropDisabled={false}
              mode="standard"
              renderClone={[Function]}
              type="DEFAULT"
            >
              <Droppable
                direction="vertical"
                droppableId="listSubSection"
                getContainerForClone={[Function]}
                ignoreContainerClipping={false}
                isCombineEnabled={false}
                isDropDisabled={false}
                mode="standard"
                placeholder={null}
                renderClone={[Function]}
                shouldAnimatePlaceholder={false}
                snapshot={
                  Object {
                    "draggingFromThisWith": null,
                    "draggingOverWith": null,
                    "isDraggingOver": false,
                    "isUsingPlaceholder": false,
                  }
                }
                type="DEFAULT"
                updateViewportMaxScroll={[Function]}
                useClone={null}
              >
                <div>
                  <ListSubsectionHeader
                    isCollapsed={false}
                    isCollapsible={false}
                    level={2}
                    title="subsection"
                  >
                    <li
                      className="list-item"
                    >
                      <h2
                        className="title"
                      >
                        <div
                          className="subsection-header"
                        >
                          <div
                            className="fill"
                          >
                            subsection
                          </div>
                        </div>
                      </h2>
                    </li>
                  </ListSubsectionHeader>
                  <li
                    className="list-item"
                  >
                    <ul
                      className="list list-fill"
                      onKeyDown={[Function]}
                    >
                      <PublicDraggable
                        draggableId="13"
                        index={0}
                        isDragDisabled={false}
                        key="13"
                      >
                        <PrivateDraggable
                          canDragInteractiveElements={false}
                          draggableId="13"
                          index={0}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          shouldRespectForcePress={false}
                        >
                          <Connect(Draggable)
                            canDragInteractiveElements={false}
                            draggableId="13"
                            index={0}
                            isClone={false}
                            isDragDisabled={false}
                            isEnabled={true}
                            shouldRespectForcePress={false}
                          >
                            <Draggable
                              canDragInteractiveElements={false}
                              draggableId="13"
                              dropAnimationFinished={[Function]}
                              index={0}
                              isClone={false}
                              isDragDisabled={false}
                              isEnabled={true}
                              mapped={
                                Object {
                                  "combineTargetFor": null,
                                  "offset": Object {
                                    "x": 0,
                                    "y": 0,
                                  },
                                  "shouldAnimateDisplacement": true,
                                  "snapshot": Object {
                                    "combineTargetFor": null,
                                    "combineWith": null,
                                    "draggingOver": null,
                                    "dropAnimation": null,
                                    "isClone": false,
                                    "isDragging": false,
                                    "isDropAnimating": false,
                                    "mode": null,
                                  },
                                  "type": "SECONDARY",
                                }
                              }
                              shouldRespectForcePress={false}
                            >
                              <InjectIntl(ListItem)
                                aria-describedby="rbd-hidden-text-2-hidden-text-8"
                                data-rbd-drag-handle-context-id="2"
                                data-rbd-drag-handle-draggable-id="13"
                                data-rbd-draggable-context-id="2"
                                data-rbd-draggable-id="13"
                                draggable={false}
                                isDraggable={true}
                                isSelectable={true}
                                key="13"
                                onDragStart={[Function]}
                                onTransitionEnd={null}
                                refCallback={[Function]}
                                role="button"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex={0}
                              >
                                <ListItem
                                  aria-describedby="rbd-hidden-text-2-hidden-text-8"
                                  data-rbd-drag-handle-context-id="2"
                                  data-rbd-drag-handle-draggable-id="13"
                                  data-rbd-draggable-context-id="2"
                                  data-rbd-draggable-id="13"
                                  draggable={false}
                                  hasChevron={false}
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {},
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": null,
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": "span",
                                      "timeZone": null,
                                    }
                                  }
                                  isDraggable={true}
                                  isSelectable={true}
                                  isSelected={false}
                                  onDragStart={[Function]}
                                  onTransitionEnd={null}
                                  refCallback={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "transform": null,
                                      "transition": null,
                                    }
                                  }
                                  tabIndex={0}
                                >
                                  <li
                                    aria-describedby="terra-hidden-tab-pane-response=0.5"
                                    aria-selected={false}
                                    className="list-item is-selectable"
                                    data-item-show-focus="true"
                                    data-rbd-drag-handle-context-id="2"
                                    data-rbd-drag-handle-draggable-id="13"
                                    data-rbd-draggable-context-id="2"
                                    data-rbd-draggable-id="13"
                                    draggable={false}
                                    onBlur={[Function]}
                                    onDragStart={[Function]}
                                    onMouseDown={[Function]}
                                    onTransitionEnd={null}
                                    role="option"
                                    style={
                                      Object {
                                        "transform": null,
                                        "transition": null,
                                      }
                                    }
                                    tabIndex="0"
                                  >
                                    <div
                                      key="knurling-icon"
                                    >
                                      <IconKnurling
                                        viewBox="0 0 48 48"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <IconBase
                                          focusable="false"
                                          height="1em"
                                          isBidi={false}
                                          isSpin={false}
                                          viewBox="0 0 48 48"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <svg
                                            className="tui-Icon icon"
                                            focusable="false"
                                            height="1em"
                                            role="presentation"
                                            viewBox="0 0 48 48"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              data-name="48"
                                            >
                                              <circle
                                                cx="15"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="17.443"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="30.254"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="43.066"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="17.544"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="30.456"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="43.368"
                                                r="3.5"
                                              />
                                            </g>
                                          </svg>
                                        </IconBase>
                                      </IconKnurling>
                                      <VisuallyHiddenText
                                        aria-hidden={true}
                                        id="terra-hidden-tab-pane-response=0.5"
                                        text="Terra.list.focus"
                                      >
                                        <span
                                          aria-hidden={true}
                                          className="visually-hidden-text"
                                          id="terra-hidden-tab-pane-response=0.5"
                                        >
                                          Terra.list.focus
                                        </span>
                                      </VisuallyHiddenText>
                                    </div>
                                    <div
                                      className="item-fill"
                                      key="item-fill"
                                    />
                                  </li>
                                </ListItem>
                              </InjectIntl(ListItem)>
                            </Draggable>
                          </Connect(Draggable)>
                        </PrivateDraggable>
                      </PublicDraggable>
                      <PublicDraggable
                        draggableId="14"
                        index={1}
                        isDragDisabled={false}
                        key="14"
                      >
                        <PrivateDraggable
                          canDragInteractiveElements={false}
                          draggableId="14"
                          index={1}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          shouldRespectForcePress={false}
                        >
                          <Connect(Draggable)
                            canDragInteractiveElements={false}
                            draggableId="14"
                            index={1}
                            isClone={false}
                            isDragDisabled={false}
                            isEnabled={true}
                            shouldRespectForcePress={false}
                          >
                            <Draggable
                              canDragInteractiveElements={false}
                              draggableId="14"
                              dropAnimationFinished={[Function]}
                              index={1}
                              isClone={false}
                              isDragDisabled={false}
                              isEnabled={true}
                              mapped={
                                Object {
                                  "combineTargetFor": null,
                                  "offset": Object {
                                    "x": 0,
                                    "y": 0,
                                  },
                                  "shouldAnimateDisplacement": true,
                                  "snapshot": Object {
                                    "combineTargetFor": null,
                                    "combineWith": null,
                                    "draggingOver": null,
                                    "dropAnimation": null,
                                    "isClone": false,
                                    "isDragging": false,
                                    "isDropAnimating": false,
                                    "mode": null,
                                  },
                                  "type": "SECONDARY",
                                }
                              }
                              shouldRespectForcePress={false}
                            >
                              <InjectIntl(ListItem)
                                aria-describedby="rbd-hidden-text-2-hidden-text-8"
                                data-rbd-drag-handle-context-id="2"
                                data-rbd-drag-handle-draggable-id="14"
                                data-rbd-draggable-context-id="2"
                                data-rbd-draggable-id="14"
                                draggable={false}
                                isDraggable={true}
                                isSelectable={true}
                                key="14"
                                onDragStart={[Function]}
                                onTransitionEnd={null}
                                refCallback={[Function]}
                                role="button"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex={0}
                              >
                                <ListItem
                                  aria-describedby="rbd-hidden-text-2-hidden-text-8"
                                  data-rbd-drag-handle-context-id="2"
                                  data-rbd-drag-handle-draggable-id="14"
                                  data-rbd-draggable-context-id="2"
                                  data-rbd-draggable-id="14"
                                  draggable={false}
                                  hasChevron={false}
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {},
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": null,
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": "span",
                                      "timeZone": null,
                                    }
                                  }
                                  isDraggable={true}
                                  isSelectable={true}
                                  isSelected={false}
                                  onDragStart={[Function]}
                                  onTransitionEnd={null}
                                  refCallback={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "transform": null,
                                      "transition": null,
                                    }
                                  }
                                  tabIndex={0}
                                >
                                  <li
                                    aria-describedby="terra-hidden-tab-pane-response=0.5"
                                    aria-selected={false}
                                    className="list-item is-selectable"
                                    data-item-show-focus="true"
                                    data-rbd-drag-handle-context-id="2"
                                    data-rbd-drag-handle-draggable-id="14"
                                    data-rbd-draggable-context-id="2"
                                    data-rbd-draggable-id="14"
                                    draggable={false}
                                    onBlur={[Function]}
                                    onDragStart={[Function]}
                                    onMouseDown={[Function]}
                                    onTransitionEnd={null}
                                    role="option"
                                    style={
                                      Object {
                                        "transform": null,
                                        "transition": null,
                                      }
                                    }
                                    tabIndex="0"
                                  >
                                    <div
                                      key="knurling-icon"
                                    >
                                      <IconKnurling
                                        viewBox="0 0 48 48"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <IconBase
                                          focusable="false"
                                          height="1em"
                                          isBidi={false}
                                          isSpin={false}
                                          viewBox="0 0 48 48"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <svg
                                            className="tui-Icon icon"
                                            focusable="false"
                                            height="1em"
                                            role="presentation"
                                            viewBox="0 0 48 48"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              data-name="48"
                                            >
                                              <circle
                                                cx="15"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="17.443"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="30.254"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="43.066"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="17.544"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="30.456"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="43.368"
                                                r="3.5"
                                              />
                                            </g>
                                          </svg>
                                        </IconBase>
                                      </IconKnurling>
                                      <VisuallyHiddenText
                                        aria-hidden={true}
                                        id="terra-hidden-tab-pane-response=0.5"
                                        text="Terra.list.focus"
                                      >
                                        <span
                                          aria-hidden={true}
                                          className="visually-hidden-text"
                                          id="terra-hidden-tab-pane-response=0.5"
                                        >
                                          Terra.list.focus
                                        </span>
                                      </VisuallyHiddenText>
                                    </div>
                                    <div
                                      className="item-fill"
                                      key="item-fill"
                                    />
                                  </li>
                                </ListItem>
                              </InjectIntl(ListItem)>
                            </Draggable>
                          </Connect(Draggable)>
                        </PrivateDraggable>
                      </PublicDraggable>
                      <PublicDraggable
                        draggableId="15"
                        index={2}
                        isDragDisabled={false}
                        key="15"
                      >
                        <PrivateDraggable
                          canDragInteractiveElements={false}
                          draggableId="15"
                          index={2}
                          isClone={false}
                          isDragDisabled={false}
                          isEnabled={true}
                          shouldRespectForcePress={false}
                        >
                          <Connect(Draggable)
                            canDragInteractiveElements={false}
                            draggableId="15"
                            index={2}
                            isClone={false}
                            isDragDisabled={false}
                            isEnabled={true}
                            shouldRespectForcePress={false}
                          >
                            <Draggable
                              canDragInteractiveElements={false}
                              draggableId="15"
                              dropAnimationFinished={[Function]}
                              index={2}
                              isClone={false}
                              isDragDisabled={false}
                              isEnabled={true}
                              mapped={
                                Object {
                                  "combineTargetFor": null,
                                  "offset": Object {
                                    "x": 0,
                                    "y": 0,
                                  },
                                  "shouldAnimateDisplacement": true,
                                  "snapshot": Object {
                                    "combineTargetFor": null,
                                    "combineWith": null,
                                    "draggingOver": null,
                                    "dropAnimation": null,
                                    "isClone": false,
                                    "isDragging": false,
                                    "isDropAnimating": false,
                                    "mode": null,
                                  },
                                  "type": "SECONDARY",
                                }
                              }
                              shouldRespectForcePress={false}
                            >
                              <InjectIntl(ListItem)
                                aria-describedby="rbd-hidden-text-2-hidden-text-8"
                                data-rbd-drag-handle-context-id="2"
                                data-rbd-drag-handle-draggable-id="15"
                                data-rbd-draggable-context-id="2"
                                data-rbd-draggable-id="15"
                                draggable={false}
                                isDraggable={true}
                                isSelectable={true}
                                key="15"
                                onDragStart={[Function]}
                                onTransitionEnd={null}
                                refCallback={[Function]}
                                role="button"
                                style={
                                  Object {
                                    "transform": null,
                                    "transition": null,
                                  }
                                }
                                tabIndex={0}
                              >
                                <ListItem
                                  aria-describedby="rbd-hidden-text-2-hidden-text-8"
                                  data-rbd-drag-handle-context-id="2"
                                  data-rbd-drag-handle-draggable-id="15"
                                  data-rbd-draggable-context-id="2"
                                  data-rbd-draggable-id="15"
                                  draggable={false}
                                  hasChevron={false}
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {},
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": null,
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": "span",
                                      "timeZone": null,
                                    }
                                  }
                                  isDraggable={true}
                                  isSelectable={true}
                                  isSelected={false}
                                  onDragStart={[Function]}
                                  onTransitionEnd={null}
                                  refCallback={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "transform": null,
                                      "transition": null,
                                    }
                                  }
                                  tabIndex={0}
                                >
                                  <li
                                    aria-describedby="terra-hidden-tab-pane-response=0.5"
                                    aria-selected={false}
                                    className="list-item is-selectable"
                                    data-item-show-focus="true"
                                    data-rbd-drag-handle-context-id="2"
                                    data-rbd-drag-handle-draggable-id="15"
                                    data-rbd-draggable-context-id="2"
                                    data-rbd-draggable-id="15"
                                    draggable={false}
                                    onBlur={[Function]}
                                    onDragStart={[Function]}
                                    onMouseDown={[Function]}
                                    onTransitionEnd={null}
                                    role="option"
                                    style={
                                      Object {
                                        "transform": null,
                                        "transition": null,
                                      }
                                    }
                                    tabIndex="0"
                                  >
                                    <div
                                      key="knurling-icon"
                                    >
                                      <IconKnurling
                                        viewBox="0 0 48 48"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <IconBase
                                          focusable="false"
                                          height="1em"
                                          isBidi={false}
                                          isSpin={false}
                                          viewBox="0 0 48 48"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <svg
                                            className="tui-Icon icon"
                                            focusable="false"
                                            height="1em"
                                            role="presentation"
                                            viewBox="0 0 48 48"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              data-name="48"
                                            >
                                              <circle
                                                cx="15"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="17.443"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="30.254"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="15"
                                                cy="43.066"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="4.632"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="17.544"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="30.456"
                                                r="3.5"
                                              />
                                              <circle
                                                cx="33"
                                                cy="43.368"
                                                r="3.5"
                                              />
                                            </g>
                                          </svg>
                                        </IconBase>
                                      </IconKnurling>
                                      <VisuallyHiddenText
                                        aria-hidden={true}
                                        id="terra-hidden-tab-pane-response=0.5"
                                        text="Terra.list.focus"
                                      >
                                        <span
                                          aria-hidden={true}
                                          className="visually-hidden-text"
                                          id="terra-hidden-tab-pane-response=0.5"
                                        >
                                          Terra.list.focus
                                        </span>
                                      </VisuallyHiddenText>
                                    </div>
                                    <div
                                      className="item-fill"
                                      key="item-fill"
                                    />
                                  </li>
                                </ListItem>
                              </InjectIntl(ListItem)>
                            </Draggable>
                          </Connect(Draggable)>
                        </PrivateDraggable>
                      </PublicDraggable>
                    </ul>
                  </li>
                  <AnimateInOut
                    on={null}
                    shouldAnimate={false}
                  />
                </div>
              </Droppable>
            </Connect(Droppable)>
          </Provider>
        </App>
      </ErrorBoundary>
    </DragDropContext>
  </ListSubsection>
</InjectIntl(ListSubsection)>
`;
