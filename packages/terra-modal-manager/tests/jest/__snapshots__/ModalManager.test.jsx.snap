exports[`ModalManger - app - should render the ModalManager with given AppDelegate as source 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
        "dismiss": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="small"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - focus lost - should render the ModalManager with focus lost 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal=""
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={false}
    isFullscreen={true}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={false}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - isFocused - should render the ModalManager with focus trapped 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal=""
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={true}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={false}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - isMaximized - should render the ModalManager as maximized 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal=""
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={true}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={false}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - isOpen - should render the ModalManager as open 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="small"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={true}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - modal components - should render the ModalManager with given modal contents 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="small"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={true}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={
        Array [
          <TestContainer
            app={
                AppDelegateInstance {
                    "closeDisclosure": [Function],
                    "disclose": [Function],
                    "dismiss": [Function],
                    "maximize": [Function],
                    "requestFocus": [Function],
                  }
            }
            display="NUMBER 1" />,
          <TestContainer
            app={
                AppDelegateInstance {
                    "closeDisclosure": [Function],
                    "disclose": [Function],
                    "dismiss": [Function],
                    "goBack": [Function],
                    "maximize": [Function],
                    "requestFocus": [Function],
                  }
            }
            display="NUMBER 2" />,
        ]
      } />
  </Modal>
</div>
`;

exports[`ModalManger - modal components - should render the ModalManager with given modal contents when components cannot be retrieved 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal=""
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={true}
    isOpen={true}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={false}
      items={
        Array [
          undefined,
          undefined,
        ]
      } />
  </Modal>
</div>
`;

exports[`ModalManger - modal components - should render the ModalManager with given modal contents when maximized 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal=""
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={true}
    isOpen={true}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={false}
      items={
        Array [
          <TestContainer
            app={
                AppDelegateInstance {
                    "closeDisclosure": [Function],
                    "disclose": [Function],
                    "dismiss": [Function],
                    "minimize": [Function],
                    "requestFocus": [Function],
                  }
            }
            display="NUMBER 1" />,
          <TestContainer
            app={
                AppDelegateInstance {
                    "closeDisclosure": [Function],
                    "disclose": [Function],
                    "dismiss": [Function],
                    "goBack": [Function],
                    "minimize": [Function],
                    "requestFocus": [Function],
                  }
            }
            display="NUMBER 2" />,
        ]
      } />
  </Modal>
</div>
`;

exports[`ModalManger - sizes - should render the ModalManager with huge size 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="huge"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - sizes - should render the ModalManager with large size 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="large"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - sizes - should render the ModalManager with medium size 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="medium"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - sizes - should render the ModalManager with small size 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="small"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger - sizes - should render the ModalManager with tiny size 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="tiny"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;

exports[`ModalManger should render the ModalManager with defaults 1`] = `
<div
  className="container">
  <TestContainer
    app={
      AppDelegateInstance {
        "disclose": [Function],
      }
    } />
  <Modal
    ariaLabel="Modal"
    classNameModal="small"
    classNameOverlay={null}
    closeOnEsc={true}
    closeOnOutsideClick={false}
    isFocused={true}
    isFullscreen={false}
    isOpen={false}
    isScrollable={false}
    onRequestClose={[Function]}
    role="document">
    <SlideGroup
      isAnimated={true}
      items={Array []} />
  </Modal>
</div>
`;
