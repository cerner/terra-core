// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown Button correctly applies the theme context className 1`] = `
<ThemeContextProvider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <InjectIntl(SplitButton)
    onSelect={[Function]}
    primaryOptionLabel="Primary Option"
  >
    <SplitButton
      buttonAttrs={Object {}}
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      isBlock={false}
      isCompact={false}
      isDisabled={false}
      onSelect={[Function]}
      primaryOptionLabel="Primary Option"
      variant="neutral"
    >
      <DropdownButtonBase
        buttonRef={[Function]}
        getSelectedOptionText={[Function]}
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isOpen={false}
        items={
          <Item
            label="1st Option"
            onSelect={[Function]}
          />
        }
        menuId="dropdown-menu-list-a26b0cae-a1f1-4f50-8298-e13941b7725e"
        refCallback={[Function]}
        requestClose={[Function]}
      >
        <div
          className="dropdown-button-base orion-fusion-theme"
          menuId="dropdown-menu-list-a26b0cae-a1f1-4f50-8298-e13941b7725e"
        >
          <button
            aria-disabled={false}
            className="split-button-primary neutral orion-fusion-theme"
            disabled={false}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            Primary Option
          </button>
          <button
            aria-controls="dropdown-menu-list-a26b0cae-a1f1-4f50-8298-e13941b7725e"
            aria-disabled={false}
            aria-expanded={false}
            aria-haspopup="menu"
            aria-label="Terra.dropdownButton.moreOptions"
            className="split-button-caret neutral orion-fusion-theme"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="caret-icon"
            />
          </button>
          <Dropdown
            buttonRef={[Function]}
            getSelectedOptionText={[Function]}
            isOpen={false}
            menuId="dropdown-menu-list-a26b0cae-a1f1-4f50-8298-e13941b7725e"
            refCallback={[Function]}
            requestClose={[Function]}
            targetRef={[Function]}
          >
            <Hookshot
              attachmentBehavior="flip"
              attachmentMargin={0}
              contentAttachment={
                Object {
                  "horizontal": "start",
                  "vertical": "top",
                }
              }
              contentOffset={
                Object {
                  "horizontal": 0,
                  "vertical": 0,
                }
              }
              isEnabled={true}
              isOpen={false}
              targetAttachment={
                Object {
                  "horizontal": "start",
                  "vertical": "bottom",
                }
              }
              targetOffset={
                Object {
                  "horizontal": 0,
                  "vertical": 0,
                }
              }
              targetRef={[Function]}
            />
          </Dropdown>
        </div>
      </DropdownButtonBase>
    </SplitButton>
  </InjectIntl(SplitButton)>
</ThemeContextProvider>
`;

exports[`Dropdown Button should render a block split type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  getSelectedOptionText={[Function]}
  isBlock={true}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  menuId="dropdown-menu-list-0bd925ed-5833-4b26-a588-86005020f01c"
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral is-block"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-0bd925ed-5833-4b26-a588-86005020f01c"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a compact split type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  getSelectedOptionText={[Function]}
  isBlock={false}
  isCompact={true}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  menuId="dropdown-menu-list-15cbe940-a9d1-4723-9eb2-efeb2e3d1549"
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral is-compact"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-15cbe940-a9d1-4723-9eb2-efeb2e3d1549"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral is-compact"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a default split type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  getSelectedOptionText={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  menuId="dropdown-menu-list-6ffa3bd9-259e-4b37-8796-f301bde30fde"
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-6ffa3bd9-259e-4b37-8796-f301bde30fde"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a disabled split type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  disabled={true}
  getSelectedOptionText={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  menuId="dropdown-menu-list-913a9a8d-da5b-4128-b212-dc2c1a13fe8b"
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-913a9a8d-da5b-4128-b212-dc2c1a13fe8b"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a split type with custom attributes 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  getSelectedOptionText={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  menuId="dropdown-menu-list-764ccb15-2cd4-42e0-8b7b-9bc97a14d481"
  other-custom-attribute="purple"
  refCallback={[Function]}
  requestClose={[Function]}
  test-custom-attribute={true}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-764ccb15-2cd4-42e0-8b7b-9bc97a14d481"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a split type with multiple children 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  getSelectedOptionText={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    Array [
      <Item
        label="1st Option"
        onSelect={[Function]}
      />,
      <Item
        label="2nd Option"
        onSelect={[Function]}
      />,
      <Item
        label="3rd Option"
        onSelect={[Function]}
      />,
    ]
  }
  menuId="dropdown-menu-list-5fe01b2e-4304-47ad-8f50-350cabf62ad9"
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-5fe01b2e-4304-47ad-8f50-350cabf62ad9"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render an open split type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  getSelectedOptionText={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  menuId="dropdown-menu-list-c040f777-2d96-4b92-ba29-5449900cb4ef"
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    className="split-button-primary neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    Primary Option
  </button>
  <button
    aria-controls="dropdown-menu-list-c040f777-2d96-4b92-ba29-5449900cb4ef"
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    aria-label="Terra.dropdownButton.moreOptions"
    className="split-button-caret neutral"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;
