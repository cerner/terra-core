// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown Button correctly applies the theme context className 1`] = `
<ThemeContextProvider
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <DropdownButton
    isBlock={false}
    isCompact={false}
    isDisabled={false}
    label="Primary Option"
    variant="neutral"
  >
    <DropdownButtonBase
      buttonRef={[Function]}
      isBlock={false}
      isCompact={false}
      isDisabled={false}
      isOpen={false}
      items={
        <Item
          label="1st Option"
          onSelect={[Function]}
        />
      }
      openedViaKeyboard={false}
      refCallback={[Function]}
      requestClose={[Function]}
    >
      <div
        className="dropdown-button-base orion-fusion-theme"
      >
        <button
          aria-disabled={false}
          aria-expanded={false}
          aria-haspopup="menu"
          className="dropdown-button neutral orion-fusion-theme"
          disabled={false}
          onClick={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          type="button"
        >
          <span
            className="dropdown-button-text"
          >
            Primary Option
          </span>
          <span
            className="caret-icon"
          />
        </button>
        <Dropdown
          buttonRef={[Function]}
          isOpen={false}
          openedViaKeyboard={false}
          refCallback={[Function]}
          requestClose={[Function]}
          targetRef={[Function]}
        >
          <Hookshot
            attachmentBehavior="flip"
            attachmentMargin={0}
            contentAttachment={
              Object {
                "horizontal": "start",
                "vertical": "top",
              }
            }
            contentOffset={
              Object {
                "horizontal": 0,
                "vertical": 0,
              }
            }
            isEnabled={true}
            isOpen={false}
            targetAttachment={
              Object {
                "horizontal": "start",
                "vertical": "bottom",
              }
            }
            targetOffset={
              Object {
                "horizontal": 0,
                "vertical": 0,
              }
            }
            targetRef={[Function]}
          />
        </Dropdown>
      </div>
    </DropdownButtonBase>
  </DropdownButton>
</ThemeContextProvider>
`;

exports[`Dropdown Button should render a block dropdown type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={true}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button neutral is-block"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a compact dropdown type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={true}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button neutral is-compact"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a default dropdown type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a disabled dropdown type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={true}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={true}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button neutral"
    disabled={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    tabIndex="-1"
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a split type with custom attributes 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  other-custom-attribute="purple"
  refCallback={[Function]}
  requestClose={[Function]}
  test-custom-attribute={true}
>
  <button
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a split type with multiple children 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    Array [
      <Item
        label="1st Option"
        onSelect={[Function]}
      />,
      <Item
        label="2nd Option"
        onSelect={[Function]}
      />,
      <Item
        label="3rd Option"
        onSelect={[Function]}
      />,
    ]
  }
  onSelect={[Function]}
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render an emphasis dropdown type 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={false}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={false}
    aria-haspopup="menu"
    className="dropdown-button emphasis"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render an open dropdown 1`] = `
<DropdownButtonBase
  buttonRef={[Function]}
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isOpen={true}
  items={
    <Item
      label="1st Option"
      onSelect={[Function]}
    />
  }
  openedViaKeyboard={false}
  refCallback={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={true}
    aria-haspopup="menu"
    className="dropdown-button neutral is-active ignore-react-onclickoutside"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-text"
    >
      Primary Option
    </span>
    <span
      className="caret-icon"
    />
  </button>
</DropdownButtonBase>
`;
