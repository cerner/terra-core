// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown Button correctly applies the theme context className 1`] = `
<ThemeContextProvider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <InjectIntl(DropdownButton)
    label="Primary Option"
  >
    <DropdownButton
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        }
      }
      isBlock={false}
      isCompact={false}
      isDisabled={false}
      label="Primary Option"
      variant="neutral"
    >
      <DropdownButtonBase
        buttonRef={[Function]}
        getSelectedOptionText={[Function]}
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isOpen={false}
        items={
          <Item
            label="1st Option"
            onSelect={[Function]}
          />
        }
        refCallback={[Function]}
        requestClose={[Function]}
      >
        <div
          className="dropdown-button-base orion-fusion-theme"
        >
          <button
            aria-disabled={false}
            aria-expanded={false}
            aria-label=""
            className="dropdown-button neutral orion-fusion-theme"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="dropdown-button-text"
            >
              Primary Option
            </span>
            <span
              className="caret-icon"
            />
          </button>
          <Dropdown
            buttonRef={[Function]}
            getSelectedOptionText={[Function]}
            isOpen={false}
            refCallback={[Function]}
            requestClose={[Function]}
            targetRef={[Function]}
          >
            <Hookshot
              attachmentBehavior="flip"
              attachmentMargin={0}
              contentAttachment={
                Object {
                  "horizontal": "start",
                  "vertical": "top",
                }
              }
              contentOffset={
                Object {
                  "horizontal": 0,
                  "vertical": 0,
                }
              }
              isEnabled={true}
              isOpen={false}
              targetAttachment={
                Object {
                  "horizontal": "start",
                  "vertical": "bottom",
                }
              }
              targetOffset={
                Object {
                  "horizontal": 0,
                  "vertical": 0,
                }
              }
              targetRef={[Function]}
            />
          </Dropdown>
        </div>
      </DropdownButtonBase>
    </DropdownButton>
  </InjectIntl(DropdownButton)>
</ThemeContextProvider>
`;

exports[`Dropdown Button should render a block dropdown type 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={true}
  isCompact={false}
  isDisabled={false}
  label="Primary Option"
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render a compact dropdown type 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={true}
  isDisabled={false}
  label="Primary Option"
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render a default dropdown type 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  label="Primary Option"
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render a disabled dropdown type 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={false}
  isDisabled={true}
  label="Primary Option"
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render a split type with custom attributes 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  label="Primary Option"
  other-custom-attribute="purple"
  test-custom-attribute={true}
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render a split type with multiple children 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  label="Primary Option"
  onSelect={[Function]}
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
  <Item
    label="2nd Option"
    onSelect={[Function]}
  />
  <Item
    label="3rd Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render an emphasis dropdown type 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  label="Primary Option"
  variant="emphasis"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;

exports[`Dropdown Button should render an open dropdown 1`] = `
<DropdownButton
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  label="Primary Option"
  variant="neutral"
>
  <Item
    label="1st Option"
    onSelect={[Function]}
  />
</DropdownButton>
`;
