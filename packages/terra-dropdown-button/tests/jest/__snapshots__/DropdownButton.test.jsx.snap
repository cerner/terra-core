// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown Button should render a block dropdown type 1`] = `
<DropdownButtonBase
  buttons={
    <Option
      label="1st Option"
      onClick={[Function]}
    />
  }
  disabled={false}
  isBlock={true}
  isOpen={false}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-haspopup={true}
    className="dropdown-button-type neutral is-block"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a default dropdown type 1`] = `
<DropdownButtonBase
  buttons={
    <Option
      label="1st Option"
      onClick={[Function]}
    />
  }
  disabled={false}
  isBlock={false}
  isOpen={false}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-haspopup={true}
    className="dropdown-button-type neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a disabled dropdown type 1`] = `
<DropdownButtonBase
  buttons={
    <Option
      label="1st Option"
      onClick={[Function]}
    />
  }
  disabled={true}
  isBlock={false}
  isOpen={false}
  requestClose={[Function]}
>
  <button
    aria-disabled={true}
    aria-haspopup={true}
    className="dropdown-button-type neutral"
    disabled={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    tabIndex="-1"
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a split type with custom attributes 1`] = `
<DropdownButtonBase
  buttons={
    <Option
      label="1st Option"
      onClick={[Function]}
    />
  }
  disabled={false}
  isBlock={false}
  isOpen={false}
  other-custom-attribute="purple"
  requestClose={[Function]}
  test-custom-attribute={true}
>
  <button
    aria-disabled={false}
    aria-haspopup={true}
    className="dropdown-button-type neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render a split type with multiple children 1`] = `
<DropdownButtonBase
  buttons={
    Array [
      <Option
        label="1st Option"
        onClick={[Function]}
      />,
      <Option
        label="2nd Option"
        onClick={[Function]}
      />,
      <Option
        label="3rd Option"
        onClick={[Function]}
      />,
    ]
  }
  disabled={false}
  isBlock={false}
  isOpen={false}
  onClick={[Function]}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-haspopup={true}
    className="dropdown-button-type neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render an emphasis dropdown type 1`] = `
<DropdownButtonBase
  buttons={
    <Option
      label="1st Option"
      onClick={[Function]}
    />
  }
  disabled={false}
  isBlock={false}
  isOpen={false}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-haspopup={true}
    className="dropdown-button-type emphasis"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;

exports[`Dropdown Button should render an open dropdown 1`] = `
<DropdownButtonBase
  buttons={
    <Option
      label="1st Option"
      onClick={[Function]}
    />
  }
  disabled={false}
  isBlock={false}
  isOpen={true}
  requestClose={[Function]}
>
  <button
    aria-disabled={false}
    aria-expanded={true}
    aria-haspopup={true}
    className="dropdown-button-type is-active neutral"
    disabled={false}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="dropdown-button-type-text"
    >
      Primary Option
    </span>
    <span
      className="chevron-icon"
    />
  </button>
</DropdownButtonBase>
`;
