// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown Button Base correctly applies the theme context className 1`] = `
<ThemeContextProvider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <DropdownButtonBase
    isBlock={false}
    isCompact={false}
    isDisabled={false}
    isOpen={true}
    items={
      <Item
        label="1st option"
        onSelect={[Function]}
      />
    }
    openedViaKeyboard={false}
    requestClose={[Function]}
  >
    <div
      className="dropdown-button-base orion-fusion-theme"
    >
      <div>
        test contents
      </div>
      <Dropdown
        isOpen={true}
        openedViaKeyboard={false}
        requestClose={[Function]}
        targetRef={[Function]}
      >
        <Hookshot
          attachmentBehavior="flip"
          attachmentMargin={0}
          contentAttachment={
            Object {
              "horizontal": "start",
              "vertical": "top",
            }
          }
          contentOffset={
            Object {
              "horizontal": 0,
              "vertical": 0,
            }
          }
          isEnabled={true}
          isOpen={true}
          targetAttachment={
            Object {
              "horizontal": "start",
              "vertical": "bottom",
            }
          }
          targetOffset={
            Object {
              "horizontal": 0,
              "vertical": 0,
            }
          }
          targetRef={[Function]}
        >
          <Portal
            isOpened={true}
          >
            <Portal
              containerInfo={
                <div>
                  <div
                    class="content"
                  >
                    <ul
                      class="dropdown-list orion-fusion-theme"
                      role="menu"
                    >
                      <li
                        data-terra-dropdown-list-item="true"
                        role="menuitem"
                        tabindex="0"
                      >
                        <div
                          class="item orion-fusion-theme"
                          role="none"
                        >
                          1st option
                        </div>
                      </li>
                    </ul>
                  </div>
                </div>
              }
            >
              <OnClickOutside(HookshotContent)
                disableOnClickOutside={false}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                excludeScrollbar={false}
                onEsc={[Function]}
                onOutsideClick={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                refCallback={[Function]}
                stopPropagation={false}
              >
                <HookshotContent
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  onEsc={[Function]}
                  onOutsideClick={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  refCallback={[Function]}
                  stopPropagation={false}
                >
                  <div
                    className="content"
                  >
                    <FocusTrap
                      _createFocusTrap={[Function]}
                      active={true}
                      focusTrapOptions={
                        Object {
                          "clickOutsideDeactivates": true,
                          "returnFocusOnDeactivate": true,
                        }
                      }
                      paused={false}
                    >
                      <InjectIntl(DropdownList)
                        requestClose={[Function]}
                      >
                        <DropdownList
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatHTMLMessage": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatPlural": [Function],
                              "formatRelative": [Function],
                              "formatTime": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralFormat": [Function],
                                "getRelativeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": null,
                              "now": [Function],
                              "onError": [Function],
                              "textComponent": "span",
                              "timeZone": null,
                            }
                          }
                          requestClose={[Function]}
                        >
                          <ul
                            className="dropdown-list orion-fusion-theme"
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            role="menu"
                            style={
                              Object {
                                "width": undefined,
                              }
                            }
                          >
                            <Item
                              aria-label={null}
                              data-terra-dropdown-list-item={true}
                              isActive={false}
                              key=".0"
                              label="1st option"
                              onSelect={[Function]}
                              requestClose={[Function]}
                            >
                              <li
                                aria-label={null}
                                data-terra-dropdown-list-item={true}
                                onClick={[Function]}
                                role="menuitem"
                                tabIndex="0"
                              >
                                <div
                                  className="item orion-fusion-theme"
                                  role="none"
                                >
                                  1st option
                                </div>
                              </li>
                            </Item>
                          </ul>
                        </DropdownList>
                      </InjectIntl(DropdownList)>
                    </FocusTrap>
                  </div>
                </HookshotContent>
              </OnClickOutside(HookshotContent)>
            </Portal>
          </Portal>
        </Hookshot>
      </Dropdown>
    </div>
  </DropdownButtonBase>
</ThemeContextProvider>
`;

exports[`Dropdown Button Base renders a block DropdownButtonBase 1`] = `
<div
  className="dropdown-button-base is-block"
>
  <div>
    test contents
  </div>
  <Dropdown
    isOpen={false}
    openedViaKeyboard={false}
    requestClose={[Function]}
    targetRef={[Function]}
  >
    <Item
      label="1st option"
      onSelect={[Function]}
    />
  </Dropdown>
</div>
`;

exports[`Dropdown Button Base renders a default DropdownButtonBase 1`] = `
<div
  className="dropdown-button-base"
>
  <div>
    test contents
  </div>
  <Dropdown
    isOpen={false}
    openedViaKeyboard={false}
    requestClose={[Function]}
    targetRef={[Function]}
  >
    <Item
      label="1st option"
      onSelect={[Function]}
    />
  </Dropdown>
</div>
`;

exports[`Dropdown Button Base renders a disabled DropdownButtonBase 1`] = `
<div
  className="dropdown-button-base"
>
  <div>
    test contents
  </div>
  <Dropdown
    isOpen={false}
    openedViaKeyboard={false}
    requestClose={[Function]}
    targetRef={[Function]}
  >
    <Item
      label="1st option"
      onSelect={[Function]}
    />
  </Dropdown>
</div>
`;

exports[`Dropdown Button Base renders an open DropdownButtonBase 1`] = `
<div
  className="dropdown-button-base"
>
  <div>
    test contents
  </div>
  <Dropdown
    isOpen={true}
    openedViaKeyboard={false}
    requestClose={[Function]}
    targetRef={[Function]}
  >
    <Item
      label="1st option"
      onSelect={[Function]}
    />
  </Dropdown>
</div>
`;
