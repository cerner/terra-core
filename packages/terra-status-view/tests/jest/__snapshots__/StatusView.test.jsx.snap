// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`correctly applies the theme context className 1`] = `
<ThemeContextProvider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <StatusView
    buttonAttrs={Array []}
    isAlignedTop={false}
    isGlyphHidden={false}
  >
    <div
      className="outer-view orion-fusion-theme"
    >
      <div
        className="top-space"
      />
      <div
        className="inner-view"
      />
      <div
        className="bottom-space"
      />
    </div>
  </StatusView>
</ThemeContextProvider>
`;

exports[`should render a no-data status view with a hidden glyph 1`] = `
<StatusView
  buttonAttrs={Array []}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isAlignedTop={false}
  isGlyphHidden={true}
  variant="no-data"
>
  <div
    className="outer-view"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
  >
    <div
      className="top-space"
    />
    <div
      className="inner-view"
    >
      <p
        className="title"
      >
        <FormattedMessage
          id="Terra.status-view.no-data"
          values={Object {}}
        >
          <span>
            Terra.status-view.no-data
          </span>
        </FormattedMessage>
      </p>
    </div>
    <div
      className="bottom-space"
    />
  </div>
</StatusView>
`;

exports[`should render a no-matching-results status-view with top alignment 1`] = `
<StatusView
  buttonAttrs={Array []}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isAlignedTop={true}
  isGlyphHidden={false}
  variant="no-matching-results"
>
  <div
    className="outer-view is-aligned-top"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
  >
    <div
      className="top-space"
    />
    <div
      className="inner-view"
    >
      <div
        className="glyph"
      >
        <div
          className="no-matching-results glyph-icon"
        />
      </div>
      <p
        className="title"
      >
        <FormattedMessage
          id="Terra.status-view.no-matching-results"
          values={Object {}}
        >
          <span>
            Terra.status-view.no-matching-results
          </span>
        </FormattedMessage>
      </p>
    </div>
    <div
      className="bottom-space"
    />
  </div>
</StatusView>
`;

exports[`should render a not-authorized status-view 1`] = `
<StatusView
  buttonAttrs={Array []}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isAlignedTop={false}
  isGlyphHidden={false}
  variant="not-authorized"
>
  <div
    className="outer-view"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
  >
    <div
      className="top-space"
    />
    <div
      className="inner-view"
    >
      <div
        className="glyph"
      >
        <div
          className="not-authorized glyph-icon"
        />
      </div>
      <p
        className="title"
      >
        <FormattedMessage
          id="Terra.status-view.not-authorized"
          values={Object {}}
        >
          <span>
            Terra.status-view.not-authorized
          </span>
        </FormattedMessage>
      </p>
    </div>
    <div
      className="bottom-space"
    />
  </div>
</StatusView>
`;

exports[`should render a status view with custom glyph, title, message, and two buttons 1`] = `
<StatusView
  buttonAttrs={
    Array [
      Object {
        "key": 1,
        "text": "Action1",
      },
      Object {
        "key": 2,
        "text": "Action2",
      },
    ]
  }
  customGlyph={
    <IconDiamond
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isAlignedTop={false}
  isGlyphHidden={false}
  message="Test Message"
  title="Test Title"
>
  <div
    className="outer-view"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
  >
    <div
      className="top-space"
    />
    <div
      className="inner-view"
    >
      <div
        className="glyph"
      >
        <IconDiamond
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        >
          <IconBase
            ariaLabel={null}
            className="IconDiamond"
            focusable="false"
            height="1em"
            isBidi={false}
            isSpin={false}
            viewBox="0 0 48 48"
            width="1em"
            xmlns="http://www.w3.org/2000/svg"
          >
            <svg
              aria-hidden="true"
              className="tui-Icon icon IconDiamond"
              focusable="false"
              height="1em"
              viewBox="0 0 48 48"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M24.8 47.7l22.9-22.9c.4-.4.4-1.1 0-1.6L24.8.3c-.4-.4-1.1-.4-1.6 0L.3 23.2c-.4.4-.4 1.1 0 1.6l22.9 22.9c.4.4 1.2.4 1.6 0z"
                fill="#78288C"
              />
            </svg>
          </IconBase>
        </IconDiamond>
      </div>
      <p
        className="title"
      >
        Test Title
      </p>
      <div
        className="divider"
      >
        <Divider>
          <hr
            aria-hidden="true"
            className="divider"
          />
        </Divider>
      </div>
      <p
        className="message"
      >
        Test Message
      </p>
      <div
        className="actions"
      >
        <Button
          className="button"
          isBlock={false}
          isCompact={false}
          isDisabled={false}
          isIconOnly={false}
          isReversed={false}
          key="1"
          text="Action1"
          type="button"
          variant="neutral"
        >
          <button
            aria-disabled={false}
            className="button neutral button"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            type="button"
          >
            <span
              className="button-label text-only"
            >
              <span
                className=""
              >
                Action1
              </span>
            </span>
          </button>
        </Button>
        <Button
          className="button"
          isBlock={false}
          isCompact={false}
          isDisabled={false}
          isIconOnly={false}
          isReversed={false}
          key="2"
          text="Action2"
          type="button"
          variant="neutral"
        >
          <button
            aria-disabled={false}
            className="button neutral button"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            type="button"
          >
            <span
              className="button-label text-only"
            >
              <span
                className=""
              >
                Action2
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
    <div
      className="bottom-space"
    />
  </div>
</StatusView>
`;

exports[`should render an error status-view 1`] = `
<StatusView
  buttonAttrs={Array []}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isAlignedTop={false}
  isGlyphHidden={false}
  variant="error"
>
  <div
    className="outer-view"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
  >
    <div
      className="top-space"
    />
    <div
      className="inner-view"
    >
      <div
        className="glyph"
      >
        <div
          className="error glyph-icon"
        />
      </div>
      <p
        className="title"
      >
        <FormattedMessage
          id="Terra.status-view.error"
          values={Object {}}
        >
          <span>
            Terra.status-view.error
          </span>
        </FormattedMessage>
      </p>
    </div>
    <div
      className="bottom-space"
    />
  </div>
</StatusView>
`;
