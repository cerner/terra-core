// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ShowHide correctly applies the theme context className 1`] = `
<ThemeContextProvider
  theme={
    Object {
      "className": "orion-fusion-theme",
    }
  }
>
  <injectIntl(ShowHide)
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <ShowHide
      buttonAlign="start"
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": null,
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      isOpen={false}
      onChange={[Function]}
      preview={
        <p>
          Test
        </p>
      }
    >
      <div>
        <p>
          Test
        </p>
        <Toggle
          isAnimated={false}
          isOpen={false}
        >
          <div
            aria-hidden={true}
            className="toggle"
          />
        </Toggle>
        <div
          className="show-hide"
        >
          <Button
            aria-expanded={false}
            className="show-hide button start"
            onClick={[Function]}
            text="Terra.showhide.showmore"
          >
            <button
              aria-expanded={false}
              className="button orion-fusion-theme show-hide button start"
              onBlur={[Function]}
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              type="button"
            >
              <span
                className="inner"
              >
                <span
                  className="text"
                >
                  Terra.showhide.showmore
                </span>
                <span
                  className="icon-holder"
                >
                  <span
                    className="icon"
                  />
                </span>
              </span>
            </button>
          </Button>
        </div>
      </div>
    </ShowHide>
  </injectIntl(ShowHide)>
</ThemeContextProvider>
`;

exports[`ShowHide should append data passed in with attributes 1`] = `
<injectIntl(ShowHide)
  data-terra-text-mock="MockData"
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    data-terra-text-mock="MockData"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div
      data-terra-text-mock="MockData"
    >
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should append styles passed in with attributes 1`] = `
<injectIntl(ShowHide)
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
  style={
    Object {
      "height": "100px",
    }
  }
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
    style={
      Object {
        "height": "100px",
      }
    }
  >
    <div
      style={
        Object {
          "height": "100px",
        }
      }
    >
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should merge classes passed in with attributes 1`] = `
<injectIntl(ShowHide)
  className="TestClass"
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    className="TestClass"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div
      className="TestClass"
    >
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start TestClass"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start TestClass"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should merge ids passed in with attributes 1`] = `
<injectIntl(ShowHide)
  id="TestId"
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    id="TestId"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div
      id="TestId"
    >
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should render a center-aligned button show-hide component 1`] = `
<injectIntl(ShowHide)
  buttonAlign="center"
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="center"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button center"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button center"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should render a default show-hide component 1`] = `
<injectIntl(ShowHide)
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should render a no preview show-hide component 1`] = `
<injectIntl(ShowHide)
  onChange={[Function]}
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
  >
    <div>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should render an initially open show-hide component 1`] = `
<injectIntl(ShowHide)
  isOpen={true}
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={true}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <Toggle
        isAnimated={false}
        isOpen={true}
      >
        <div
          aria-hidden={false}
          className="toggle"
        >
          Full Text
        </div>
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={true}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.hide"
        >
          <button
            aria-expanded={true}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.hide
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should set buttonText prop correctly when it is collapsed 1`] = `
<injectIntl(ShowHide)
  buttonText="Collapsed Text"
  isOpen={false}
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    buttonText="Collapsed Text"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Collapsed Text"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Collapsed Text
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should set buttonText prop correctly when it is expanded 1`] = `
<injectIntl(ShowHide)
  buttonText="Expanded Text"
  isOpen={true}
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    buttonText="Expanded Text"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={true}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <Toggle
        isAnimated={false}
        isOpen={true}
      >
        <div
          aria-hidden={false}
          className="toggle"
        >
          Full Text
        </div>
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={true}
          className="show-hide button start"
          onClick={[Function]}
          text="Expanded Text"
        >
          <button
            aria-expanded={true}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Expanded Text
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should set children prop correctly 1`] = `
<injectIntl(ShowHide)
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should set isOpen prop correctly 1`] = `
<injectIntl(ShowHide)
  isOpen={true}
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={true}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <Toggle
        isAnimated={false}
        isOpen={true}
      >
        <div
          aria-hidden={false}
          className="toggle"
        >
          Full Text
        </div>
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={true}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.hide"
        >
          <button
            aria-expanded={true}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.hide
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should set preview prop correctly 1`] = `
<injectIntl(ShowHide)
  onChange={[Function]}
  preview={
    <p>
      Preview Text
    </p>
  }
>
  <ShowHide
    buttonAlign="start"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Preview Text
      </p>
    }
  >
    <div>
      <p>
        Preview Text
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button start"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button start"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;

exports[`ShowHide should set the button to align right 1`] = `
<injectIntl(ShowHide)
  buttonAlign="end"
  onChange={[Function]}
  preview={
    <p>
      Test
    </p>
  }
>
  <ShowHide
    buttonAlign="end"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
    isOpen={false}
    onChange={[Function]}
    preview={
      <p>
        Test
      </p>
    }
  >
    <div>
      <p>
        Test
      </p>
      <Toggle
        isAnimated={false}
        isOpen={false}
      >
        <div
          aria-hidden={true}
          className="toggle"
        />
      </Toggle>
      <div
        className="show-hide"
      >
        <Button
          aria-expanded={false}
          className="show-hide button end"
          onClick={[Function]}
          text="Terra.showhide.showmore"
        >
          <button
            aria-expanded={false}
            className="button show-hide button end"
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            type="button"
          >
            <span
              className="inner"
            >
              <span
                className="text"
              >
                Terra.showhide.showmore
              </span>
              <span
                className="icon-holder"
              >
                <span
                  className="icon"
                />
              </span>
            </span>
          </button>
        </Button>
      </div>
    </div>
  </ShowHide>
</injectIntl(ShowHide)>
`;
