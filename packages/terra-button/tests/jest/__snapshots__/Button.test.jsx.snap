// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should pass in refCallback as the ref prop of the input element 1`] = `
<Button
  isBlock={false}
  isCompact={false}
  isDisabled={false}
  isIconOnly={false}
  isReversed={false}
  refCallback={
    [MockFunction] {
      "calls": Array [
        Array [
          <button
            aria-disabled="false"
            class="button neutral"
            type="button"
          >
            <span
              class="button-label text-only"
            >
              <span
                class=""
              >
                text
              </span>
            </span>
          </button>,
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  text="text"
  type="button"
  variant="neutral"
>
  <button
    aria-disabled={false}
    className="button neutral"
    disabled={false}
    onBlur={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    type="button"
  >
    <span
      className="button-label text-only"
    >
      <span
        className=""
      >
        text
      </span>
    </span>
  </button>
</Button>
`;

exports[`should render a Button with merged attributes 1`] = `
<button
  aria-disabled={false}
  className="button neutral TestClass"
  data-mock="data"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  style={
    Object {
      "height": "100px",
    }
  }
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      text
    </span>
  </span>
</button>
`;

exports[`should render a button with a title 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Custom Title"
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      Button
    </span>
  </span>
</button>
`;

exports[`should render a button with accessible label 1`] = `
<button
  aria-disabled={false}
  aria-label="Custom Accessible Label"
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      Button
    </span>
  </span>
</button>
`;

exports[`should render a button with type equal to button 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      button
    </span>
  </span>
</button>
`;

exports[`should render a button with type equal to reset 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="reset"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      reset
    </span>
  </span>
</button>
`;

exports[`should render a button with type equal to submit 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="submit"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      submit
    </span>
  </span>
</button>
`;

exports[`should render a de-emphasis button 1`] = `
<button
  aria-disabled={false}
  className="button de-emphasis"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      de-emphasis
    </span>
  </span>
</button>
`;

exports[`should render a emphasis button 1`] = `
<button
  aria-disabled={false}
  className="button emphasis"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      emphasis
    </span>
  </span>
</button>
`;

exports[`should render a ghost button 1`] = `
<button
  aria-disabled={false}
  className="button ghost"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      ghost
    </span>
  </span>
</button>
`;

exports[`should render a neutral button 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      neutral
    </span>
  </span>
</button>
`;

exports[`should render a utility button 1`] = `
<button
  aria-disabled={false}
  aria-label="utility"
  className="button utility"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="utility"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render a utility button with a custom accessible label 1`] = `
<button
  aria-disabled={false}
  aria-label="Custom Accessible Label"
  className="button utility"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Icon Only"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render a utility button with a custom title 1`] = `
<button
  aria-disabled={false}
  aria-label="Icon Only"
  className="button utility"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Custom Title"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render a utility button with text as a fallback accessible label 1`] = `
<button
  aria-disabled={false}
  aria-label="Icon Only"
  className="button utility"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Icon Only"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render a utility button with text as a fallback title 1`] = `
<button
  aria-disabled={false}
  aria-label="Icon Only"
  className="button utility"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Icon Only"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render an action button 1`] = `
<button
  aria-disabled={false}
  className="button action"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      action
    </span>
  </span>
</button>
`;

exports[`should render an icon 1`] = `
<button
  aria-disabled={false}
  aria-label="isIconOnly"
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="isIconOnly"
  type="button"
>
  <span
    className="button-label icon-only"
  >
    <span
      className="icon"
    >
      <img
        alt="icon"
        className="icon-svg"
      />
    </span>
  </span>
</button>
`;

exports[`should render an icon and a text 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-and-icon"
  >
    <span
      className="icon icon-first"
    >
      <img
        alt="icon"
        className="icon-svg"
      />
    </span>
    <span
      className=""
    >
      text
    </span>
  </span>
</button>
`;

exports[`should render an icon only button with a custom accessible label 1`] = `
<button
  aria-disabled={false}
  aria-label="Custom Accessible Label"
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Icon Only"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render an icon only button with a custom title 1`] = `
<button
  aria-disabled={false}
  aria-label="Icon Only"
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Custom Title"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render an icon only button with text as a fallback accessible label 1`] = `
<button
  aria-disabled={false}
  aria-label="Icon Only"
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Icon Only"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render an icon only button with text as a fallback title 1`] = `
<button
  aria-disabled={false}
  aria-label="Icon Only"
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  title="Icon Only"
  type="button"
>
  <span
    className="button-label icon-only text-only"
  />
</button>
`;

exports[`should render as an anchor when provided an href 1`] = `
<a
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  href="MockHref"
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      href
    </span>
  </span>
</a>
`;

exports[`should render as disabled when set 1`] = `
<button
  aria-disabled={true}
  className="button neutral is-disabled"
  disabled={true}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  tabIndex="-1"
  type="button"
>
  <span
    className="button-label text-only"
  >
    <span
      className=""
    >
      Disabled
    </span>
  </span>
</button>
`;

exports[`should render text then an icon when reversed 1`] = `
<button
  aria-disabled={false}
  className="button neutral"
  disabled={false}
  onBlur={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  type="button"
>
  <span
    className="button-label text-and-icon"
  >
    <span
      className="text-first"
    >
      text
    </span>
    <span
      className="icon"
    >
      <img
        alt="icon"
        className="icon-svg"
      />
    </span>
  </span>
</button>
`;
