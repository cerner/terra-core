// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Alert of type advisory with text content should render an Alert component of type advisory 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base advisory wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.advisory
        </strong>
        This is an advisory alert.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type alert with text content should render an Alert component of type alert 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base alert wide"
    role="alert"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconAlert
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.alert
        </strong>
        This is a test
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type custom with custom title and text content should render an Alert component of type custom 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base custom wide terra-alert-custom-orange-color"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconHelp
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section section-custom"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Help!
        </strong>
        This is a custom alert.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type error with text content should render an Alert component of type error 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base error wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconError
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.error
        </strong>
        This is an error.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type info with custom title and HTML content should render an Alert component of type info with custom title and HTML content 1`] = `
<Alert
  customColorClass="custom-default-color"
  disableAlertActionFocus={false}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  title="Gettysburg Address"
  type="info"
>
  <span>
    Four score and seven years ago . . .
  </span>
</Alert>
`;

exports[`Alert of type info with text content should render an Alert component of type info 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base info wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconInformation
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.info
        </strong>
        This is an information alert.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type success with an action button text content should render an Alert component of type success with an action button 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base success wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconSuccess
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.success
        </strong>
        This is a success alert.
      </div>
    </div>
    <div
      className="actions"
    >
      <Button
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isIconOnly={false}
        isReversed={false}
        onClick={[MockFunction]}
        text="Action"
        type="button"
        variant="emphasis"
      />
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type success with text content should render an Alert component of type success 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base success wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconSuccess
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.success
        </strong>
        This is a success alert.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type unsatisfied should render an unsatisfied Alert 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base unsatisfied wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon unsatisfied-icon"
      >
        <IconGapChecking
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.unsatisfied
        </strong>
        This is an unsatisfied alert.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type unverified should render an unverified Alert 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base unverified wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon unverified-icon"
      >
        <IconDiamondSymbol
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.unverified
        </strong>
        This is an unverified alert.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert of type warning with text content should render an Alert component of type warning 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base warning wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconWarning
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.warning
        </strong>
        This is an warning.
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert with no props should render a default component 1`] = `
<InjectIntl(Alert)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Alert
    customColorClass="custom-default-color"
    disableAlertActionFocus={false}
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    type="alert"
  >
    <ResponsiveElement
      onChange={[Function]}
      responsiveTo="parent"
    >
      <div
        className="alert-base alert narrow"
        role="alert"
      >
        <div
          className="body body-std"
        >
          <span
            className="icon"
          >
            <IconAlert
              viewBox="0 0 48 48"
              xmlns="http://www.w3.org/2000/svg"
            >
              <IconBase
                className="IconAlert"
                focusable="false"
                height="1em"
                isBidi={false}
                isSpin={false}
                viewBox="0 0 48 48"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <svg
                  className="tui-Icon icon IconAlert"
                  focusable="false"
                  height="1em"
                  role="presentation"
                  viewBox="0 0 48 48"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1.2 45c-1.1 0-1.6-.8-1-1.7L23 3.7c.5-1 1.4-1 2 0l22.8 39.6c.5 1 .1 1.7-1 1.7H1.2z"
                    fill="#E50000"
                  />
                  <path
                    d="M21.5 36.7h5V42h-5v-5.3zm0-22.7h5v17.3h-5V14z"
                    fill="#FFF"
                  />
                </svg>
              </IconBase>
            </IconAlert>
          </span>
          <div
            className="section"
            id="alert-message-00000000-0000-0000-0000-000000000000"
          >
            <strong
              className="title"
              id="alert-title-00000000-0000-0000-0000-000000000000"
            >
              Terra.alert.alert
            </strong>
          </div>
        </div>
      </div>
    </ResponsiveElement>
  </Alert>
</InjectIntl(Alert)>
`;

exports[`Alert with no props should render a default notification banner with default props 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base alert wide"
    role="alert"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconAlert
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.alert
        </strong>
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert with props should render an alert with provided role 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base alert wide"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconAlert
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.alert
        </strong>
      </div>
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Alert with props should render disableAlertActionFocus when provided 1`] = `
<InjectIntl(Alert)
  disableAlertActionFocus={true}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
>
  <Alert
    customColorClass="custom-default-color"
    disableAlertActionFocus={true}
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": null,
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    type="alert"
  >
    <ResponsiveElement
      onChange={[Function]}
      responsiveTo="parent"
    >
      <div
        className="alert-base alert narrow"
        role="alert"
      >
        <div
          className="body body-std"
        >
          <span
            className="icon"
          >
            <IconAlert
              viewBox="0 0 48 48"
              xmlns="http://www.w3.org/2000/svg"
            >
              <IconBase
                className="IconAlert"
                focusable="false"
                height="1em"
                isBidi={false}
                isSpin={false}
                viewBox="0 0 48 48"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <svg
                  className="tui-Icon icon IconAlert"
                  focusable="false"
                  height="1em"
                  role="presentation"
                  viewBox="0 0 48 48"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1.2 45c-1.1 0-1.6-.8-1-1.7L23 3.7c.5-1 1.4-1 2 0l22.8 39.6c.5 1 .1 1.7-1 1.7H1.2z"
                    fill="#E50000"
                  />
                  <path
                    d="M21.5 36.7h5V42h-5v-5.3zm0-22.7h5v17.3h-5V14z"
                    fill="#FFF"
                  />
                </svg>
              </IconBase>
            </IconAlert>
          </span>
          <div
            className="section"
            id="alert-message-00000000-0000-0000-0000-000000000000"
          >
            <strong
              className="title"
              id="alert-title-00000000-0000-0000-0000-000000000000"
            >
              Terra.alert.alert
            </strong>
          </div>
        </div>
      </div>
    </ResponsiveElement>
  </Alert>
</InjectIntl(Alert)>
`;

exports[`Dismissable Alert of type custom with action button, custom title and text content should render an Alert component of type custom with an action button 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base custom wide terra-alert-custom-orange-color"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconHelp
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section section-custom"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Help!
        </strong>
        This is a custom alert.
      </div>
    </div>
    <div
      className="actions actions-custom"
    >
      <Button
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isIconOnly={false}
        isReversed={false}
        onClick={[MockFunction]}
        text="Action"
        type="button"
        variant="emphasis"
      />
      <Button
        aria-describedby="alert-title-00000000-0000-0000-0000-000000000000"
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isIconOnly={false}
        isReversed={false}
        onClick={[MockFunction]}
        text="Terra.alert.dismiss"
        type="button"
        variant="neutral"
      />
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Dismissible Alert that includes actions section should render an alert component with a dismiss button 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base alert wide"
    role="alert"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconAlert
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.alert
        </strong>
        This is a test
      </div>
    </div>
    <div
      className="actions"
    >
      <Button
        aria-describedby="alert-title-00000000-0000-0000-0000-000000000000"
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isIconOnly={false}
        isReversed={false}
        onClick={[MockFunction]}
        text="Terra.alert.dismiss"
        type="button"
        variant="neutral"
      />
    </div>
  </div>
</ResponsiveElement>
`;

exports[`Notification banner of type alert with action element should render with empty body div to focus 1`] = `
<ResponsiveElement
  onChange={[Function]}
  responsiveTo="parent"
>
  <div
    className="alert-base alert wide"
    role="alert"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconAlert
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.alert
        </strong>
        This is a test
      </div>
      <div
        className="empty-body"
        style={
          Object {
            "height": 0,
            "position": "absolute",
            "width": 0,
          }
        }
        tabIndex="-1"
      />
    </div>
    <div
      className="actions"
    >
      <Button
        isBlock={false}
        isCompact={false}
        isDisabled={false}
        isIconOnly={false}
        isReversed={false}
        type="button"
        variant="neutral"
      />
    </div>
  </div>
</ResponsiveElement>
`;

exports[`correctly applies the theme context className 1`] = `
<Fragment>
  <div />
  <div
    className="alert-base success wide orion-fusion-theme"
    role="status"
  >
    <div
      className="body body-std"
    >
      <span
        className="icon"
      >
        <IconSuccess
          viewBox="0 0 48 48"
          xmlns="http://www.w3.org/2000/svg"
        />
      </span>
      <div
        className="section"
        id="alert-message-00000000-0000-0000-0000-000000000000"
      >
        <strong
          className="title"
          id="alert-title-00000000-0000-0000-0000-000000000000"
        >
          Terra.alert.success
        </strong>
      </div>
    </div>
  </div>
</Fragment>
`;
